{"version":3,"file":"filter-color-map.mjs","sources":["../src/ColorMapFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './color-map.frag';\nimport { Filter, Texture, TextureSource, MIPMAP_MODES, SCALE_MODES } from '@pixi/core';\nimport type { FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ntype ColorMapSource = TextureSource | Texture | null;\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-map.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-map|@pixi/filter-color-map}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass ColorMapFilter extends Filter\n{\n    /** The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image. */\n    public mix = 1;\n\n    private _size = 0;\n    private _sliceSize = 0;\n    private _slicePixelSize = 0;\n    private _sliceInnerSize = 0;\n    private _nearest = false;\n    private _scaleMode: SCALE_MODES | null = null;\n    private _colorMap: Texture | null = null;\n\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The\n     *        colorMap texture of the filter.\n     * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n     * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n     */\n    constructor(colorMap: ColorMapSource, nearest = false, mix = 1)\n    {\n        super(vertex, fragment);\n\n        this._scaleMode = null;\n        this.nearest = nearest;\n        this.mix = mix;\n        this.colorMap = colorMap;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        this.uniforms._mix = this.mix;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The size of one color slice\n     * @readonly\n     */\n    get colorSize(): number\n    {\n        return this._size;\n    }\n\n    /**\n     * the colorMap texture\n     * @member {PIXI.Texture}\n     */\n    get colorMap(): ColorMapSource\n    {\n        return this._colorMap;\n    }\n    set colorMap(colorMap: ColorMapSource)\n    {\n        if (!colorMap)\n        {\n            return;\n        }\n        if (!(colorMap instanceof Texture))\n        {\n            colorMap = Texture.from(colorMap);\n        }\n        if ((colorMap as Texture)?.baseTexture)\n        {\n            colorMap.baseTexture.scaleMode = this._scaleMode as SCALE_MODES;\n            colorMap.baseTexture.mipmap = MIPMAP_MODES.OFF;\n\n            this._size = colorMap.height;\n            this._sliceSize = 1 / this._size;\n            this._slicePixelSize = this._sliceSize / this._size;\n            this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n            this.uniforms._size = this._size;\n            this.uniforms._sliceSize = this._sliceSize;\n            this.uniforms._slicePixelSize = this._slicePixelSize;\n            this.uniforms._sliceInnerSize = this._sliceInnerSize;\n\n            this.uniforms.colorMap = colorMap;\n        }\n\n        this._colorMap = colorMap;\n    }\n\n    /**\n     * Whether use NEAREST for colorMap texture.\n     */\n    get nearest(): boolean\n    {\n        return this._nearest;\n    }\n    set nearest(nearest: boolean)\n    {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? SCALE_MODES.NEAREST : SCALE_MODES.LINEAR;\n\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture)\n        {\n            texture.baseTexture._glTextures = {};\n\n            texture.baseTexture.scaleMode = this._scaleMode;\n            texture.baseTexture.mipmap = MIPMAP_MODES.OFF;\n\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas , and the content of canvas has changed,\n     *   then call `updateColorMap` for update texture.\n     */\n    updateColorMap(): void\n    {\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture)\n        {\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     *\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture of colorMap as well\n     */\n    destroy(destroyBase = false): void\n    {\n        if (this._colorMap)\n        {\n            this._colorMap.destroy(destroyBase);\n        }\n        super.destroy();\n    }\n}\n\nexport { ColorMapFilter };\n\n"],"names":["ColorMapFilter","Filter","colorMap","nearest","mix","vertex","fragment","filterManager","input","output","clear","Texture","MIPMAP_MODES","SCALE_MODES","texture","destroyBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgBA,MAAMA,UAAuBC,CAC7B,CAkBI,YAAYC,EAA0BC,EAAU,GAAOC,EAAM,EAC7D,CACI,MAAMC,EAAQC,CAAQ,EAlB1B,KAAO,IAAM,EAEb,KAAQ,MAAQ,EAChB,KAAQ,WAAa,EACrB,KAAQ,gBAAkB,EAC1B,KAAQ,gBAAkB,EAC1B,KAAQ,SAAW,GACnB,KAAQ,WAAiC,KACzC,KAAQ,UAA4B,KAYhC,KAAK,WAAa,KAClB,KAAK,QAAUH,EACf,KAAK,IAAMC,EACX,KAAK,SAAWF,CACpB,CAMA,MAAMK,EAA6BC,EAAsBC,EAAuBC,EAChF,CACI,KAAK,SAAS,KAAO,KAAK,IAE1BH,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAK,CACxD,CAMA,IAAI,WACJ,CACI,OAAO,KAAK,KAChB,CAMA,IAAI,UACJ,CACI,OAAO,KAAK,SAChB,CACA,IAAI,SAASR,EACb,CACQ,CAACA,IAICA,aAAoBS,IAEtBT,EAAWS,EAAQ,KAAKT,CAAQ,GAE/BA,GAAA,MAAAA,EAAsB,cAEvBA,EAAS,YAAY,UAAY,KAAK,WACtCA,EAAS,YAAY,OAASU,EAAa,IAE3C,KAAK,MAAQV,EAAS,OACtB,KAAK,WAAa,EAAI,KAAK,MAC3B,KAAK,gBAAkB,KAAK,WAAa,KAAK,MAC9C,KAAK,gBAAkB,KAAK,iBAAmB,KAAK,MAAQ,GAE5D,KAAK,SAAS,MAAQ,KAAK,MAC3B,KAAK,SAAS,WAAa,KAAK,WAChC,KAAK,SAAS,gBAAkB,KAAK,gBACrC,KAAK,SAAS,gBAAkB,KAAK,gBAErC,KAAK,SAAS,SAAWA,GAG7B,KAAK,UAAYA,EACrB,CAKA,IAAI,SACJ,CACI,OAAO,KAAK,QAChB,CACA,IAAI,QAAQC,EACZ,CACI,KAAK,SAAWA,EAChB,KAAK,WAAaA,EAAUU,EAAY,QAAUA,EAAY,OAE9D,MAAMC,EAAU,KAAK,UAEjBA,GAAWA,EAAQ,cAEnBA,EAAQ,YAAY,YAAc,CAAC,EAEnCA,EAAQ,YAAY,UAAY,KAAK,WACrCA,EAAQ,YAAY,OAASF,EAAa,IAE1CE,EAAQ,YACRA,EAAQ,YAAY,KAAK,SAAUA,EAAQ,WAAW,EAE9D,CAMA,gBACA,CACI,MAAMA,EAAU,KAAK,UAEjBA,GAAWA,EAAQ,cAEnBA,EAAQ,YACRA,EAAQ,YAAY,KAAK,SAAUA,EAAQ,WAAW,EAEtD,KAAK,SAAWA,EAExB,CAOA,QAAQC,EAAc,GACtB,CACQ,KAAK,WAEL,KAAK,UAAU,QAAQA,CAAW,EAEtC,MAAM,QAAQ,CAClB,CACJ"}
{"version":3,"file":"filter-color-replace.js","sources":["../src/ColorReplaceFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './colorReplace.frag';\nimport { Filter, utils } from '@pixi/core';\n\ntype Color = number | number[] | Float32Array;\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-replace.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-replace|@pixi/filter-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter(\n *   [1, 0, 0],\n *   [0, 0, 1],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(\n *   [220/255.0, 220/255.0, 220/255.0],\n *   [225/255.0, 200/255.0, 215/255.0],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(0xdcdcdc, 0xe1c8d7, 0.001)];\n *\n */\nclass ColorReplaceFilter extends Filter\n{\n    private _originalColor = 0xff0000;\n    private _newColor = 0x0;\n\n    /**\n     * @param {number|Array<number>|Float32Array} [originalColor=0xFF0000] - The color that will be changed,\n     *        as a 3 component RGB e.g. `[1.0, 1.0, 1.0]`\n     * @param {number|Array<number>|Float32Array} [newColor=0x000000] - The resulting color, as a 3 component\n     *        RGB e.g. `[1.0, 0.5, 1.0]`\n     * @param {number} [epsilon=0.4] - Tolerance/sensitivity of the floating-point comparison between colors\n     *        (lower = more exact, higher = more inclusive)\n     */\n    constructor(originalColor: Color = 0xFF0000, newColor: Color = 0x000000, epsilon = 0.4)\n    {\n        super(vertex, fragment);\n        this.uniforms.originalColor = new Float32Array(3);\n        this.uniforms.newColor = new Float32Array(3);\n        this.originalColor = originalColor;\n        this.newColor = newColor;\n        this.epsilon = epsilon;\n    }\n\n    /**\n     * The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n     * @member {number|Array<number>|Float32Array}\n     * @default 0xFF0000\n     */\n    set originalColor(value: Color)\n    {\n        const arr = this.uniforms.originalColor;\n\n        if (typeof value === 'number')\n        {\n            utils.hex2rgb(value, arr);\n            this._originalColor = value;\n        }\n        else\n        {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._originalColor = utils.rgb2hex(arr);\n        }\n    }\n    get originalColor(): Color\n    {\n        return this._originalColor;\n    }\n\n    /**\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>|Float32Array}\n     * @default 0x000000\n     */\n    set newColor(value: Color)\n    {\n        const arr = this.uniforms.newColor;\n\n        if (typeof value === 'number')\n        {\n            utils.hex2rgb(value, arr);\n            this._newColor = value;\n        }\n        else\n        {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._newColor = utils.rgb2hex(arr);\n        }\n    }\n    get newColor(): Color\n    {\n        return this._newColor;\n    }\n\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.4\n     */\n    set epsilon(value: number)\n    {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon(): number\n    {\n        return this.uniforms.epsilon;\n    }\n}\n\nexport { ColorReplaceFilter };\n"],"names":["ColorReplaceFilter","Filter","originalColor","newColor","epsilon","vertex","fragment","value","arr","utils"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCA,MAAMA,UAA2BC,EACjC,MAAA,CAYI,YAAYC,EAAuB,SAAUC,EAAkB,EAAUC,EAAU,GACnF,CACI,MAAMC,EAAQC,CAAQ,EAb1B,KAAQ,eAAiB,SACzB,KAAQ,UAAY,EAahB,KAAK,SAAS,cAAgB,IAAI,aAAa,CAAC,EAChD,KAAK,SAAS,SAAW,IAAI,aAAa,CAAC,EAC3C,KAAK,cAAgBJ,EACrB,KAAK,SAAWC,EAChB,KAAK,QAAUC,CACnB,CAOA,IAAI,cAAcG,EAClB,CACI,MAAMC,EAAM,KAAK,SAAS,cAEtB,OAAOD,GAAU,UAEjBE,QAAM,QAAQF,EAAOC,CAAG,EACxB,KAAK,eAAiBD,IAItBC,EAAI,GAAKD,EAAM,GACfC,EAAI,GAAKD,EAAM,GACfC,EAAI,GAAKD,EAAM,GACf,KAAK,eAAiBE,EAAAA,MAAM,QAAQD,CAAG,EAE/C,CACA,IAAI,eACJ,CACI,OAAO,KAAK,cAChB,CAOA,IAAI,SAASD,EACb,CACI,MAAMC,EAAM,KAAK,SAAS,SAEtB,OAAOD,GAAU,UAEjBE,EAAAA,MAAM,QAAQF,EAAOC,CAAG,EACxB,KAAK,UAAYD,IAIjBC,EAAI,GAAKD,EAAM,GACfC,EAAI,GAAKD,EAAM,GACfC,EAAI,GAAKD,EAAM,GACf,KAAK,UAAYE,EAAAA,MAAM,QAAQD,CAAG,EAE1C,CACA,IAAI,UACJ,CACI,OAAO,KAAK,SAChB,CAMA,IAAI,QAAQD,EACZ,CACI,KAAK,SAAS,QAAUA,CAC5B,CACA,IAAI,SACJ,CACI,OAAO,KAAK,SAAS,OACzB,CACJ"}
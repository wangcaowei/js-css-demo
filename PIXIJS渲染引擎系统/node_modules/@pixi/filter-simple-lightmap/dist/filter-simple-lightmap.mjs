/*!
 * @pixi/filter-simple-lightmap - v5.1.1
 * Compiled Wed, 11 Jan 2023 23:10:33 UTC
 *
 * @pixi/filter-simple-lightmap is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */import{Filter as a,utils as n}from"@pixi/core";var l=`attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;

uniform mat3 projectionMatrix;

varying vec2 vTextureCoord;

void main(void)
{
    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
    vTextureCoord = aTextureCoord;
}`,u=`varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform sampler2D uLightmap;
uniform vec4 filterArea;
uniform vec2 dimensions;
uniform vec4 ambientColor;
void main() {
    vec4 diffuseColor = texture2D(uSampler, vTextureCoord);
    vec2 lightCoord = (vTextureCoord * filterArea.xy) / dimensions;
    vec4 light = texture2D(uLightmap, lightCoord);
    vec3 ambient = ambientColor.rgb * ambientColor.a;
    vec3 intensity = ambient + light.rgb;
    vec3 finalColor = diffuseColor.rgb * intensity;
    gl_FragColor = vec4(finalColor, diffuseColor.a);
}
`;class m extends a{constructor(o,e=0,i=1){super(l,u),this._color=0,this.uniforms.dimensions=new Float32Array(2),this.uniforms.ambientColor=new Float32Array([0,0,0,i]),this.texture=o,this.color=e}apply(o,e,i,s){var r,t;this.uniforms.dimensions[0]=(r=e.filterFrame)==null?void 0:r.width,this.uniforms.dimensions[1]=(t=e.filterFrame)==null?void 0:t.height,o.applyFilter(this,e,i,s)}get texture(){return this.uniforms.uLightmap}set texture(o){this.uniforms.uLightmap=o}set color(o){const e=this.uniforms.ambientColor;typeof o=="number"?(n.hex2rgb(o,e),this._color=o):(e[0]=o[0],e[1]=o[1],e[2]=o[2],e[3]=o[3],this._color=n.rgb2hex(e))}get color(){return this._color}get alpha(){return this.uniforms.ambientColor[3]}set alpha(o){this.uniforms.ambientColor[3]=o}}export{m as SimpleLightmapFilter};
//# sourceMappingURL=filter-simple-lightmap.mjs.map

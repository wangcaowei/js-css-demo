{"version":3,"file":"filter-shockwave.mjs","sources":["../src/ShockwaveFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './shockwave.frag';\nimport { Filter } from '@pixi/core';\nimport type { Point, CLEAR_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\ntype PointLike = Point | number[];\n\ninterface ShockwaveFilterOptions\n{\n    amplitude: number;\n    wavelength: number;\n    speed: number;\n    brightness: number;\n    radius: number;\n}\n\n/**\n * The ShockwaveFilter class lets you apply a shockwave effect.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/shockwave.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-shockwave|@pixi/filter-shockwave}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass ShockwaveFilter extends Filter\n{\n    /** Default constructor options. */\n    public static readonly defaults: ShockwaveFilterOptions = {\n        amplitude: 30.0,\n        wavelength: 160.0,\n        brightness: 1.0,\n        speed: 500.0,\n        radius: -1.0,\n    };\n\n    /**\n     * Sets the elapsed time of the shockwave.\n     * It could control the current size of shockwave.\n     */\n    public time: number;\n\n    /**\n     * @param {PIXI.Point|number[]} [center=[0.5, 0.5]] - See `center` property.\n     * @param {object} [options] - The optional parameters of shockwave filter.\n     * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\n     * @param {number} [options.wavelength=1.0] - See `wavelength` property.\n     * @param {number} [options.speed=500.0] - See `speed` property.\n     * @param {number} [options.brightness=8] - See `brightness` property.\n     * @param {number} [options.radius=4] - See `radius` property.\n     * @param {number} [time=0] - See `time` property.\n     */\n    constructor(center: PointLike = [0, 0], options?: Partial<ShockwaveFilterOptions>, time = 0)\n    {\n        super(vertex, fragment);\n        this.center = center;\n        Object.assign(this, ShockwaveFilter.defaults, options);\n        this.time = time;\n    }\n\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        // There is no set/get of `time`, for performance.\n        // Because in the most real cases, `time` will be changed in ever game tick.\n        // Use set/get will take more function-call.\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {PIXI.Point|number[]}\n     */\n    get center(): PointLike\n    {\n        return this.uniforms.center;\n    }\n    set center(value: PointLike)\n    {\n        this.uniforms.center = value;\n    }\n\n    /**\n     * The amplitude of the shockwave.\n     */\n    get amplitude(): number\n    {\n        return this.uniforms.amplitude;\n    }\n    set amplitude(value: number)\n    {\n        this.uniforms.amplitude = value;\n    }\n\n    /**\n     * The wavelength of the shockwave.\n     */\n    get wavelength(): number\n    {\n        return this.uniforms.wavelength;\n    }\n    set wavelength(value: number)\n    {\n        this.uniforms.wavelength = value;\n    }\n\n    /**\n     * The brightness of the shockwave.\n     */\n    get brightness(): number\n    {\n        return this.uniforms.brightness;\n    }\n    set brightness(value: number)\n    {\n        this.uniforms.brightness = value;\n    }\n\n    /**\n     * The speed about the shockwave ripples out.\n     * The unit is `pixel/second`\n     */\n    get speed(): number\n    {\n        return this.uniforms.speed;\n    }\n    set speed(value: number)\n    {\n        this.uniforms.speed = value;\n    }\n\n    /**\n     * The maximum radius of shockwave.\n     * `< 0.0` means it's infinity.\n     */\n    get radius(): number\n    {\n        return this.uniforms.radius;\n    }\n    set radius(value: number)\n    {\n        this.uniforms.radius = value;\n    }\n}\n\nexport { ShockwaveFilter };\n"],"names":["_ShockwaveFilter","Filter","center","options","time","vertex","fragment","filterManager","input","output","clear","value","ShockwaveFilter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyBA,MAAMA,EAAN,cAA8BC,CAC9B,CA0BI,YAAYC,EAAoB,CAAC,EAAG,CAAC,EAAGC,EAA2CC,EAAO,EAC1F,CACI,MAAMC,EAAQC,CAAQ,EACtB,KAAK,OAASJ,EACd,OAAO,OAAO,KAAMF,EAAgB,SAAUG,CAAO,EACrD,KAAK,KAAOC,CAChB,CAEA,MAAMG,EAA6BC,EAAsBC,EAAuBC,EAChF,CAII,KAAK,SAAS,KAAO,KAAK,KAE1BH,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAK,CACxD,CAQA,IAAI,QACJ,CACI,OAAO,KAAK,SAAS,MACzB,CACA,IAAI,OAAOC,EACX,CACI,KAAK,SAAS,OAASA,CAC3B,CAKA,IAAI,WACJ,CACI,OAAO,KAAK,SAAS,SACzB,CACA,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,UAAYA,CAC9B,CAKA,IAAI,YACJ,CACI,OAAO,KAAK,SAAS,UACzB,CACA,IAAI,WAAWA,EACf,CACI,KAAK,SAAS,WAAaA,CAC/B,CAKA,IAAI,YACJ,CACI,OAAO,KAAK,SAAS,UACzB,CACA,IAAI,WAAWA,EACf,CACI,KAAK,SAAS,WAAaA,CAC/B,CAMA,IAAI,OACJ,CACI,OAAO,KAAK,SAAS,KACzB,CACA,IAAI,MAAMA,EACV,CACI,KAAK,SAAS,MAAQA,CAC1B,CAMA,IAAI,QACJ,CACI,OAAO,KAAK,SAAS,MACzB,CACA,IAAI,OAAOA,EACX,CACI,KAAK,SAAS,OAASA,CAC3B,CACJ,EAzHMC,IAAAA,EAANZ,EAAMY,EAGqB,SAAmC,CACtD,UAAW,GACX,WAAY,IACZ,WAAY,EACZ,MAAO,IACP,OAAQ,EACZ"}
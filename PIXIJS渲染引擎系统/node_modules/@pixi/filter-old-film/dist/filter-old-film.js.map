{"version":3,"file":"filter-old-film.js","sources":["../src/OldFilmFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './old-film.frag';\nimport { Filter } from '@pixi/core';\nimport type { FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ninterface OldFilmFilterOptions\n{\n    sepia: number;\n    noise: number;\n    noiseSize: number;\n    scratch: number;\n    scratchDensity: number;\n    scratchWidth: number;\n    vignetting: number;\n    vignettingAlpha: number;\n    vignettingBlur: number;\n}\n\n/**\n * The OldFilmFilter applies a Old film effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/old-film.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-old-film|@pixi/filter-old-film}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass OldFilmFilter extends Filter\n{\n    /** Default constructor options */\n    public static readonly defaults: OldFilmFilterOptions = {\n        sepia: 0.3,\n        noise: 0.3,\n        noiseSize: 1.0,\n        scratch: 0.5,\n        scratchDensity: 0.3,\n        scratchWidth: 1.0,\n        vignetting: 0.3,\n        vignettingAlpha: 1.0,\n        vignettingBlur: 0.3,\n    };\n\n    /** A see value to apply to the random noise generation */\n    public seed = 0;\n\n    /**\n     * @param {object|number} [options] - The optional parameters of old film effect.\n     *                        When options is a number , it will be `seed`\n     * @param {number} [options.sepia=0.3] - The amount of saturation of sepia effect,\n     *        a value of `1` is more saturation and closer to `0` is less, and a value of\n     *        `0` produces no sepia effect\n     * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n     * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n     * @param {number} [options.scratch=0.5] - How often scratches appear\n     * @param {number} [options.scratchDensity=0.3] - The density of the number of scratches\n     * @param {number} [options.scratchWidth=1.0] - The width of the scratches\n     * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n     *        values produces a smaller vignette\n     * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n     * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n     * @param {number} [seed=0] - A see value to apply to the random noise generation\n     */\n    constructor(options?: Partial<OldFilmFilterOptions>, seed = 0)\n    {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        if (typeof options === 'number')\n        {\n            this.seed = options;\n            options = undefined;\n        }\n        else\n        {\n            this.seed = seed;\n        }\n\n        Object.assign(this, OldFilmFilter.defaults, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        this.uniforms.dimensions[0] = input.filterFrame?.width;\n        this.uniforms.dimensions[1] = input.filterFrame?.height;\n\n        // named `seed` because in the most programming languages,\n        // `random` used for \"the function for generating random value\".\n        this.uniforms.seed = this.seed;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less,\n     * and a value of `0` produces no sepia effect\n     * @default 0\n     */\n    set sepia(value: number)\n    {\n        this.uniforms.sepia = value;\n    }\n\n    get sepia(): number\n    {\n        return this.uniforms.sepia;\n    }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     * @default 0\n     */\n    set noise(value: number)\n    {\n        this.uniforms.noise = value;\n    }\n\n    get noise(): number\n    {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * The size of the noise particles\n     * @default 0\n     */\n    set noiseSize(value: number)\n    {\n        this.uniforms.noiseSize = value;\n    }\n\n    get noiseSize(): number\n    {\n        return this.uniforms.noiseSize;\n    }\n\n    /**\n     * How often scratches appear\n     * @default 0\n     */\n    set scratch(value: number)\n    {\n        this.uniforms.scratch = value;\n    }\n\n    get scratch(): number\n    {\n        return this.uniforms.scratch;\n    }\n\n    /**\n     * The density of the number of scratches\n     * @default 0\n     */\n    set scratchDensity(value: number)\n    {\n        this.uniforms.scratchDensity = value;\n    }\n\n    get scratchDensity(): number\n    {\n        return this.uniforms.scratchDensity;\n    }\n\n    /**\n     * The width of the scratches\n     * @default 0\n     */\n    set scratchWidth(value: number)\n    {\n        this.uniforms.scratchWidth = value;\n    }\n\n    get scratchWidth(): number\n    {\n        return this.uniforms.scratchWidth;\n    }\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     * @default 0\n     */\n    set vignetting(value: number)\n    {\n        this.uniforms.vignetting = value;\n    }\n\n    get vignetting(): number\n    {\n        return this.uniforms.vignetting;\n    }\n\n    /**\n     * Amount of opacity of vignette\n     * @default 0\n     */\n    set vignettingAlpha(value: number)\n    {\n        this.uniforms.vignettingAlpha = value;\n    }\n\n    get vignettingAlpha(): number\n    {\n        return this.uniforms.vignettingAlpha;\n    }\n\n    /**\n     * Blur intensity of the vignette\n     * @default 0\n     */\n    set vignettingBlur(value: number)\n    {\n        this.uniforms.vignettingBlur = value;\n    }\n\n    get vignettingBlur(): number\n    {\n        return this.uniforms.vignettingBlur;\n    }\n}\n\nexport { OldFilmFilter };\nexport type { OldFilmFilterOptions };\n"],"names":["_OldFilmFilter","Filter","options","seed","vertex","fragment","filterManager","input","output","clear","_a","_b","value","OldFilmFilter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BA,MAAMA,EAAN,cAA4BC,EAAAA,MAC5B,CAkCI,YAAYC,EAAyCC,EAAO,EAC5D,CACI,MAAMC,EAAQC,CAAQ,EArB1B,KAAO,KAAO,EAsBV,KAAK,SAAS,WAAa,IAAI,aAAa,CAAC,EAEzC,OAAOH,GAAY,UAEnB,KAAK,KAAOA,EACZA,EAAU,QAIV,KAAK,KAAOC,EAGhB,OAAO,OAAO,KAAMH,EAAc,SAAUE,CAAO,CACvD,CAMA,MAAMI,EAA6BC,EAAsBC,EAAuBC,EAChF,CArFJ,IAAAC,EAAAC,EAsFQ,KAAK,SAAS,WAAW,IAAKD,EAAAH,EAAM,cAAN,KAAAG,OAAAA,EAAmB,MACjD,KAAK,SAAS,WAAW,IAAKC,EAAAJ,EAAM,cAAN,KAAAI,OAAAA,EAAmB,OAIjD,KAAK,SAAS,KAAO,KAAK,KAE1BL,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAK,CACxD,CAQA,IAAI,MAAMG,EACV,CACI,KAAK,SAAS,MAAQA,CAC1B,CAEA,IAAI,OACJ,CACI,OAAO,KAAK,SAAS,KACzB,CAMA,IAAI,MAAMA,EACV,CACI,KAAK,SAAS,MAAQA,CAC1B,CAEA,IAAI,OACJ,CACI,OAAO,KAAK,SAAS,KACzB,CAMA,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,UAAYA,CAC9B,CAEA,IAAI,WACJ,CACI,OAAO,KAAK,SAAS,SACzB,CAMA,IAAI,QAAQA,EACZ,CACI,KAAK,SAAS,QAAUA,CAC5B,CAEA,IAAI,SACJ,CACI,OAAO,KAAK,SAAS,OACzB,CAMA,IAAI,eAAeA,EACnB,CACI,KAAK,SAAS,eAAiBA,CACnC,CAEA,IAAI,gBACJ,CACI,OAAO,KAAK,SAAS,cACzB,CAMA,IAAI,aAAaA,EACjB,CACI,KAAK,SAAS,aAAeA,CACjC,CAEA,IAAI,cACJ,CACI,OAAO,KAAK,SAAS,YACzB,CAOA,IAAI,WAAWA,EACf,CACI,KAAK,SAAS,WAAaA,CAC/B,CAEA,IAAI,YACJ,CACI,OAAO,KAAK,SAAS,UACzB,CAMA,IAAI,gBAAgBA,EACpB,CACI,KAAK,SAAS,gBAAkBA,CACpC,CAEA,IAAI,iBACJ,CACI,OAAO,KAAK,SAAS,eACzB,CAMA,IAAI,eAAeA,EACnB,CACI,KAAK,SAAS,eAAiBA,CACnC,CAEA,IAAI,gBACJ,CACI,OAAO,KAAK,SAAS,cACzB,CACJ,EArMA,IAAMC,EAANb,EAAMa,EAGqB,SAAiC,CACpD,MAAO,GACP,MAAO,GACP,UAAW,EACX,QAAS,GACT,eAAgB,GAChB,aAAc,EACd,WAAY,GACZ,gBAAiB,EACjB,eAAgB,EACpB"}
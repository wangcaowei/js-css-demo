{"version":3,"file":"filter-convolution.mjs","sources":["../src/ConvolutionFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './convolution.frag';\nimport { Filter } from '@pixi/core';\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See https://docs.gimp.org/2.10/en/gimp-filter-convolution-matrix.html for more info.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/convolution.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-convolution|@pixi/filter-convolution}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass ConvolutionFilter extends Filter\n{\n    /**\n     * @param {number[]} [matrix=[0,0,0,0,0,0,0,0,0]] - An array of values used for matrix transformation.\n     *        Specified as a 9 point Array.\n     * @param {number} [width=200] - Width of the object you are transforming\n     * @param {number} [height=200] - Height of the object you are transforming\n     */\n    constructor(matrix: number[], width = 200, height = 200)\n    {\n        super(vertex, fragment);\n        this.uniforms.texelSize = new Float32Array(2);\n        this.uniforms.matrix = new Float32Array(9);\n        if (matrix !== undefined)\n        {\n            this.matrix = matrix;\n        }\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     */\n    get matrix(): number[]\n    {\n        return this.uniforms.matrix;\n    }\n    set matrix(matrix: number[])\n    {\n        matrix.forEach((v, i) =>\n        {\n            this.uniforms.matrix[i] = v;\n        });\n    }\n\n    /**\n     * Width of the object you are transforming\n     */\n    get width(): number\n    {\n        return 1 / this.uniforms.texelSize[0];\n    }\n    set width(value: number)\n    {\n        this.uniforms.texelSize[0] = 1 / value;\n    }\n\n    /**\n     * Height of the object you are transforming\n     */\n    get height(): number\n    {\n        return 1 / this.uniforms.texelSize[1];\n    }\n    set height(value: number)\n    {\n        this.uniforms.texelSize[1] = 1 / value;\n    }\n}\n\nexport { ConvolutionFilter };\n"],"names":["ConvolutionFilter","Filter","matrix","width","height","vertex","fragment","v","i","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiBA,MAAMA,UAA0BC,CAChC,CAOI,YAAYC,EAAkBC,EAAQ,IAAKC,EAAS,IACpD,CACI,MAAMC,EAAQC,CAAQ,EACtB,KAAK,SAAS,UAAY,IAAI,aAAa,CAAC,EAC5C,KAAK,SAAS,OAAS,IAAI,aAAa,CAAC,EACrCJ,IAAW,SAEX,KAAK,OAASA,GAElB,KAAK,MAAQC,EACb,KAAK,OAASC,CAClB,CAKA,IAAI,QACJ,CACI,OAAO,KAAK,SAAS,MACzB,CACA,IAAI,OAAOF,EACX,CACIA,EAAO,QAAQ,CAACK,EAAGC,IACnB,CACI,KAAK,SAAS,OAAOA,GAAKD,CAC9B,CAAC,CACL,CAKA,IAAI,OACJ,CACI,MAAW,GAAA,KAAK,SAAS,UAAU,EACvC,CACA,IAAI,MAAME,EACV,CACI,KAAK,SAAS,UAAU,GAAK,EAAIA,CACrC,CAKA,IAAI,QACJ,CACI,MAAO,GAAI,KAAK,SAAS,UAAU,EACvC,CACA,IAAI,OAAOA,EACX,CACI,KAAK,SAAS,UAAU,GAAK,EAAIA,CACrC,CACJ"}
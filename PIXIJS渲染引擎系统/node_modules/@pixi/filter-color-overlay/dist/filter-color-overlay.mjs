/*!
 * @pixi/filter-color-overlay - v5.1.1
 * Compiled Wed, 11 Jan 2023 23:10:33 UTC
 *
 * @pixi/filter-color-overlay is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */import{Filter as e,utils as t}from"@pixi/core";var n=`attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;

uniform mat3 projectionMatrix;

varying vec2 vTextureCoord;

void main(void)
{
    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
    vTextureCoord = aTextureCoord;
}`,a=`varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform vec3 color;
uniform float alpha;

void main(void) {
    vec4 currentColor = texture2D(uSampler, vTextureCoord);
    gl_FragColor = vec4(mix(currentColor.rgb, color.rgb, currentColor.a * alpha), currentColor.a);
}
`;class i extends e{constructor(o=0,r=1){super(n,a),this._color=0,this._alpha=1,this.uniforms.color=new Float32Array(3),this.color=o,this.alpha=r}set color(o){const r=this.uniforms.color;typeof o=="number"?(t.hex2rgb(o,r),this._color=o):(r[0]=o[0],r[1]=o[1],r[2]=o[2],this._color=t.rgb2hex(r))}get color(){return this._color}set alpha(o){this.uniforms.alpha=o,this._alpha=o}get alpha(){return this._alpha}}export{i as ColorOverlayFilter};
//# sourceMappingURL=filter-color-overlay.mjs.map

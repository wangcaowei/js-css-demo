{"version":3,"file":"filter-color-overlay.mjs","sources":["../src/ColorOverlayFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './colorOverlay.frag';\nimport { Filter, utils } from '@pixi/core';\n\ntype Color = number | number[] | Float32Array;\n\n/**\n * Replace all colors within a source graphic with a single color.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-overlay.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-replace|@pixi/filter-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @example\n *  // replaces red with blue\n *  someSprite.filters = [new ColorOverlayFilter(\n *   [1, 0, 0],\n *   [0, 0, 1],\n *   0.001\n *   )];\n *\n */\nclass ColorOverlayFilter extends Filter\n{\n    private _color = 0x0;\n    private _alpha = 1;\n\n    /**\n     * @param {number|Array<number>} [color=0x000000] - The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @param {number} [alpha=1] - The alpha value of the color\n     */\n    constructor(color: Color = 0x000000, alpha = 1)\n    {\n        super(vertex, fragment);\n        this.uniforms.color = new Float32Array(3);\n        this.color = color;\n        this.alpha = alpha;\n    }\n\n    /**\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>|Float32Array}\n     * @default 0x000000\n     */\n    set color(value: Color)\n    {\n        const arr = this.uniforms.color;\n\n        if (typeof value === 'number')\n        {\n            utils.hex2rgb(value, arr);\n            this._color = value;\n        }\n        else\n        {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._color = utils.rgb2hex(arr);\n        }\n    }\n    get color(): Color\n    {\n        return this._color;\n    }\n\n    /**\n     * The alpha value of the color\n     * @default 0\n     */\n    set alpha(value: number)\n    {\n        this.uniforms.alpha = value;\n        this._alpha = value;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n}\n\nexport { ColorOverlayFilter };\n"],"names":["ColorOverlayFilter","Filter","color","alpha","vertex","fragment","value","arr","utils"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;EAwBA,MAAMA,UAA2BC,CACjC,CAQI,YAAYC,EAAe,EAAUC,EAAQ,EAC7C,CACI,MAAMC,EAAQC,CAAQ,EAT1B,KAAQ,OAAS,EACjB,KAAQ,OAAS,EASb,KAAK,SAAS,MAAQ,IAAI,aAAa,CAAC,EACxC,KAAK,MAAQH,EACb,KAAK,MAAQC,CACjB,CAOA,IAAI,MAAMG,EACV,CACI,MAAMC,EAAM,KAAK,SAAS,MAEtB,OAAOD,GAAU,UAEjBE,EAAM,QAAQF,EAAOC,CAAG,EACxB,KAAK,OAASD,IAIdC,EAAI,GAAKD,EAAM,GACfC,EAAI,GAAKD,EAAM,GACfC,EAAI,GAAKD,EAAM,GACf,KAAK,OAASE,EAAM,QAAQD,CAAG,EAEvC,CACA,IAAI,OACJ,CACI,OAAO,KAAK,MAChB,CAMA,IAAI,MAAMD,EACV,CACI,KAAK,SAAS,MAAQA,EACtB,KAAK,OAASA,CAClB,CACA,IAAI,OACJ,CACI,OAAO,KAAK,MAChB,CACJ"}
{"version":3,"file":"filter-bulge-pinch.mjs","sources":["../src/BulgePinchFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './bulgePinch.frag';\nimport { Filter } from '@pixi/core';\nimport type { Point, Rectangle, FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ntype PointLike = Point | number[];\n\ninterface BulgePinchFilterOptions\n{\n    center: PointLike;\n    radius: number;\n    strength: number;\n}\n\n// @author Julien CLEREL @JuloxRox\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js\n// by Evan Wallace : http://madebyevan.com/\n\n/**\n * Bulges or pinches the image in a circle.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bulge-pinch.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bulge-pinch|@pixi/filter-bulge-pinch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass BulgePinchFilter extends Filter\n{\n    /** Default constructor options. */\n    public static readonly defaults: BulgePinchFilterOptions = {\n        center: [0.5, 0.5],\n        radius: 100,\n        strength: 1,\n    };\n\n    /**\n     * @param {object} [options] - Options to use for filter.\n     * @param {PIXI.Point|Array<number>} [options.center=[0,0]] - The x and y coordinates of the center\n     *        of the circle of effect.\n     * @param {number} [options.radius=100] - The radius of the circle of effect.\n     * @param {number} [options.strength=1] - -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     */\n    constructor(options?: Partial<BulgePinchFilterOptions>)\n    {\n        super(vertex, fragment);\n\n        this.uniforms.dimensions = new Float32Array(2);\n\n        Object.assign(this, BulgePinchFilter.defaults, options);\n    }\n\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        const { width, height } = input.filterFrame as Rectangle;\n\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * The radius of the circle of effect.\n     */\n    get radius(): number\n    {\n        return this.uniforms.radius;\n    }\n    set radius(value: number)\n    {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     */\n    get strength(): number\n    {\n        return this.uniforms.strength;\n    }\n    set strength(value: number)\n    {\n        this.uniforms.strength = value;\n    }\n\n    /**\n     * The x and y coordinates of the center of the circle of effect.\n     *\n     * @member {PIXI.Point | Array<number>}\n     */\n    get center(): PointLike\n    {\n        return this.uniforms.center;\n    }\n    set center(value: PointLike)\n    {\n        this.uniforms.center = value;\n    }\n}\n\nexport { BulgePinchFilter };\nexport type { BulgePinchFilterOptions };\n"],"names":["_BulgePinchFilter","Filter","options","vertex","fragment","filterManager","input","output","clear","width","height","value","BulgePinchFilter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BA,MAAMA,EAAN,cAA+BC,CAC/B,CAeI,YAAYC,EACZ,CACI,MAAMC,EAAQC,CAAQ,EAEtB,KAAK,SAAS,WAAa,IAAI,aAAa,CAAC,EAE7C,OAAO,OAAO,KAAMJ,EAAiB,SAAUE,CAAO,CAC1D,CAEA,MAAMG,EAA6BC,EAAsBC,EAAuBC,EAChF,CACI,KAAM,CAAE,MAAAC,EAAO,OAAAC,CAAO,EAAIJ,EAAM,YAEhC,KAAK,SAAS,WAAW,GAAKG,EAC9B,KAAK,SAAS,WAAW,GAAKC,EAC9BL,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAK,CACxD,CAKA,IAAI,QACJ,CACI,OAAO,KAAK,SAAS,MACzB,CACA,IAAI,OAAOG,EACX,CACI,KAAK,SAAS,OAASA,CAC3B,CAKA,IAAI,UACJ,CACI,OAAO,KAAK,SAAS,QACzB,CACA,IAAI,SAASA,EACb,CACI,KAAK,SAAS,SAAWA,CAC7B,CAOA,IAAI,QACJ,CACI,OAAO,KAAK,SAAS,MACzB,CACA,IAAI,OAAOA,EACX,CACI,KAAK,SAAS,OAASA,CAC3B,CACJ,EAvEA,IAAMC,EAANZ,EAAMY,EAGqB,SAAoC,CACvD,OAAQ,CAAC,GAAK,EAAG,EACjB,OAAQ,IACR,SAAU,CACd"}
import { Filter } from '@pixi/core';

export declare type Color = number | string | Float32Array | number[];

/**
 * Render a colored gradient.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-gradient.png)
 *
 * @class
 * @extends PIXI.Filter
 * @see {@link https://www.npmjs.com/package/@pixi/filter-color-gradient|@pixi/filter-color-gradient}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 */
export declare class ColorGradientFilter extends Filter {
    /** Gradient types */
    static readonly LINEAR = 0;
    static readonly RADIAL = 1;
    static readonly CONIC = 2;
    /** Default constructor options */
    static readonly defaults: DefaultOptions;
    private _stops;
    /**
     * @param {DefaultOptions | CssOptions} [options]
     * @param {number} [options.alpha=1.0] - Alpha value
     * @param {number} [options.maxColors=0] - Maximum number of colors to render (0 = disabled)
     */
    constructor(options?: DefaultOptions | CssOptions);
    get stops(): ColorStop[];
    set stops(stops: ColorStop[]);
    /**
     * The type of gradient
     * @default ColorGradientFilter.LINEAR
     */
    set type(value: number);
    get type(): number;
    /**
     * The angle of the gradient in degrees
     * @default 90
     */
    set angle(value: number);
    get angle(): number;
    /**
     * The alpha value of the gradient (0-1)
     * @default 1
     */
    set alpha(value: number);
    get alpha(): number;
    /**
     * The maximum number of colors to render (0 = no limit)
     * @default 0
     */
    set maxColors(value: number);
    get maxColors(): number;
}

export declare type ColorStop = {
    offset: number;
    color: Color;
    alpha: number;
};

export declare type CssOptions = {
    css: string;
    alpha?: number;
    maxColors?: number;
};

export declare type DefaultOptions = {
    type: number;
    stops: ColorStop[];
    angle?: number;
    alpha?: number;
    maxColors?: number;
};

export { }

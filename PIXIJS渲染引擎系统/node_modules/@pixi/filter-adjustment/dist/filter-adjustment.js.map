{"version":3,"file":"filter-adjustment.js","sources":["../src/AdjustmentFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './adjustment.frag';\nimport { Filter } from '@pixi/core';\nimport type { FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ninterface AdjustmentFilterOptions\n{\n    gamma: number;\n    saturation: number;\n    contrast: number;\n    brightness: number;\n    red: number;\n    green: number;\n    blue: number;\n    alpha: number;\n}\n\n/**\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift.\n * This is a faster and much simpler to use than\n * {@link http://pixijs.download/release/docs/ColorMatrixFilter.html ColorMatrixFilter}\n * because it does not use a matrix.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/adjustment.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-adjustment|@pixi/filter-adjustment}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass AdjustmentFilter extends Filter\n{\n    /** The amount of luminance */\n    public gamma = 1;\n\n    /** The amount of saturation */\n    public saturation = 1;\n\n    /** The amount of contrast */\n    public contrast = 1;\n\n    /** The amount of brightness */\n    public brightness = 1;\n\n    /** The amount of red channel */\n    public red = 1;\n\n    /** The amount of green channel */\n    public green = 1;\n\n    /** The amount of blue channel */\n    public blue = 1;\n\n    /** The amount of alpha channel */\n    public alpha = 1;\n\n    /**\n     * @param {object|number} [options] - The optional parameters of the filter.\n     * @param {number} [options.gamma=1] - The amount of luminance\n     * @param {number} [options.saturation=1] - The amount of color saturation\n     * @param {number} [options.contrast=1] - The amount of contrast\n     * @param {number} [options.brightness=1] - The overall brightness\n     * @param {number} [options.red=1] - The multipled red channel\n     * @param {number} [options.green=1] - The multipled green channel\n     * @param {number} [options.blue=1] - The multipled blue channel\n     * @param {number} [options.alpha=1] - The overall alpha amount\n     */\n    constructor(options?: Partial<AdjustmentFilterOptions>)\n    {\n        super(vertex, fragment);\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @ignore\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        this.uniforms.gamma = Math.max(this.gamma, 0.0001);\n        this.uniforms.saturation = this.saturation;\n        this.uniforms.contrast = this.contrast;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.red = this.red;\n        this.uniforms.green = this.green;\n        this.uniforms.blue = this.blue;\n        this.uniforms.alpha = this.alpha;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n}\n\nexport { AdjustmentFilter };\nexport type { AdjustmentFilterOptions };\n"],"names":["AdjustmentFilter","Filter","options","vertex","fragment","filterManager","input","output","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BA,MAAMA,UAAyBC,EAAAA,MAC/B,CAoCI,YAAYC,EACZ,CACI,MAAMC,EAAQC,CAAQ,EApC1B,KAAO,MAAQ,EAGf,KAAO,WAAa,EAGpB,KAAO,SAAW,EAGlB,KAAO,WAAa,EAGpB,KAAO,IAAM,EAGb,KAAO,MAAQ,EAGf,KAAO,KAAO,EAGd,KAAO,MAAQ,EAiBX,OAAO,OAAO,KAAMF,CAAO,CAC/B,CAMA,MAAMG,EAA6BC,EAAsBC,EAAuBC,EAChF,CACI,KAAK,SAAS,MAAQ,KAAK,IAAI,KAAK,MAAO,IAAM,EACjD,KAAK,SAAS,WAAa,KAAK,WAChC,KAAK,SAAS,SAAW,KAAK,SAC9B,KAAK,SAAS,WAAa,KAAK,WAChC,KAAK,SAAS,IAAM,KAAK,IACzB,KAAK,SAAS,MAAQ,KAAK,MAC3B,KAAK,SAAS,KAAO,KAAK,KAC1B,KAAK,SAAS,MAAQ,KAAK,MAE3BH,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAK,CACxD,CACJ"}
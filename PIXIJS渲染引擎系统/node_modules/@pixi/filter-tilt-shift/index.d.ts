import type { CLEAR_MODES } from '@pixi/core';
import { Filter } from '@pixi/core';
import { FilterSystem } from '@pixi/core';
import { Point } from '@pixi/core';
import { RenderTexture } from '@pixi/core';

/**
 * A TiltShiftAxisFilter.
 *
 * @class
 * @extends PIXI.Filter
 * @private
 */
export declare class TiltShiftAxisFilter extends Filter {
    constructor(options: TiltShiftFilterOptions);
    /**
     * Updates the filter delta values.
     * This is overridden in the X and Y filters, does nothing for this class.
     *
     */
    protected updateDelta(): void;
    /**
     * The strength of the blur.
     *
     * @memberof TiltShiftAxisFilter#
     */
    get blur(): number;
    set blur(value: number);
    /**
     * The strength of the gradient blur.
     *
     * @memberof TiltShiftAxisFilter#
     */
    get gradientBlur(): number;
    set gradientBlur(value: number);
    /**
     * The X value to start the effect at.
     *
     * @member {PIXI.Point}
     * @memberof TiltShiftAxisFilter#
     */
    get start(): Point;
    set start(value: Point);
    /**
     * The X value to end the effect at.
     *
     * @member {PIXI.Point}
     * @memberof TiltShiftAxisFilter#
     */
    get end(): Point;
    set end(value: Point);
}

/**
 * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/tilt-shift.png)
 *
 * @class
 * @extends PIXI.Filter
 * @see {@link https://www.npmjs.com/package/@pixi/filter-tilt-shift|@pixi/filter-tilt-shift}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 */
export declare class TiltShiftFilter extends Filter {
    /** Default options */
    static readonly defaults: TiltShiftFilterOptions;
    private tiltShiftXFilter;
    private tiltShiftYFilter;
    /**
     * @param {TiltShiftFilterOptions} [options] - The optional parameters of the tilt shift filter.
     */
    constructor(options?: Partial<TiltShiftFilterOptions>);
    /**
     * @deprecated since 5.3.0
     * @param {number} [blur=100] - The strength of the blur.
     * @param {number} [gradientBlur=600] - The strength of the gradient blur.
     * @param {PIXI.Point} [start=null] - The position to start the effect at.
     * @param {PIXI.Point} [end=null] - The position to end the effect at.
     */
    constructor(blur?: number, gradientBlur?: number, start?: Point, end?: Point);
    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void;
    /** The strength of the blur. */
    get blur(): number;
    set blur(value: number);
    /** The strength of the gradient blur. */
    get gradientBlur(): number;
    set gradientBlur(value: number);
    /**
     * The position to start the effect at.
     *
     * @member {PIXI.Point}
     */
    get start(): Point;
    set start(value: Point);
    /**
     * The position to end the effect at.
     *
     * @member {PIXI.Point}
     */
    get end(): Point;
    set end(value: Point);
}

/**
 * Options for creating filter.
 */
export declare interface TiltShiftFilterOptions {
    /** The strength of the blur. */
    blur: number;
    /** The strength of the blur gradient */
    gradientBlur: number;
    /** The position to start the effect at. */
    start?: Point | undefined;
    /** The position to end the effect at. */
    end?: Point | undefined;
}

/**
 * A TiltShiftXFilter.
 *
 * @class
 * @extends PIXI.TiltShiftAxisFilter
 * @private
 */
export declare class TiltShiftXFilter extends TiltShiftAxisFilter {
    /**
     * Updates the filter delta values.
     */
    protected updateDelta(): void;
}

/**
 * A TiltShiftYFilter.
 *
 * @class
 * @extends PIXI.TiltShiftAxisFilter
 * @private
 */
export declare class TiltShiftYFilter extends TiltShiftAxisFilter {
    /**
     * Updates the filter delta values.
     */
    protected updateDelta(): void;
}

export { }

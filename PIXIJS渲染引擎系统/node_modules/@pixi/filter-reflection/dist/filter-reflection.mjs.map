{"version":3,"file":"filter-reflection.mjs","sources":["../src/ReflectionFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './reflection.frag';\nimport { Filter } from '@pixi/core';\nimport type { FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ntype Range = number[] | Float32Array;\n\ninterface ReflectionFilterOptions\n{\n    mirror: boolean;\n    boundary: number;\n    amplitude: Range;\n    waveLength: Range;\n    alpha: Range;\n    time: number;\n}\n\n/**\n * Applies a reflection effect to simulate the reflection on water with waves.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/reflection.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-reflection|@pixi/filter-reflection}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass ReflectionFilter extends Filter\n{\n    /** Default constructor options */\n    public static readonly defaults: ReflectionFilterOptions = {\n        mirror: true,\n        boundary: 0.5,\n        amplitude: [0, 20],\n        waveLength: [30, 100],\n        alpha: [1, 1],\n        time: 0,\n    };\n\n    /** Time for animating position of waves */\n    public time = 0;\n\n    /**\n     * @param {object} [options] - The optional parameters of Reflection effect.\n     * @param {number} [options.mirror=true] - `true` to reflect the image, `false` for waves-only\n     * @param {number} [options.boundary=0.5] - Vertical position of the reflection point, default is 50% (middle)\n     *                 smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     * @param {number} [options.amplitude=[0, 20]] - Starting and ending amplitude of waves\n     * @param {number} [options.waveLength=[30, 100]] - Starting and ending length of waves\n     * @param {number} [options.alpha=[1, 1]] - Starting and ending alpha values\n     * @param {number} [options.time=0] - Time for animating position of waves\n     */\n    constructor(options?: Partial<ReflectionFilterOptions>)\n    {\n        super(vertex, fragment);\n        this.uniforms.amplitude = new Float32Array(2);\n        this.uniforms.waveLength = new Float32Array(2);\n        this.uniforms.alpha = new Float32Array(2);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        Object.assign(this, ReflectionFilter.defaults, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        this.uniforms.dimensions[0] = input.filterFrame?.width;\n        this.uniforms.dimensions[1] = input.filterFrame?.height;\n\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     * @default true\n     */\n    set mirror(value: boolean)\n    {\n        this.uniforms.mirror = value;\n    }\n    get mirror(): boolean\n    {\n        return this.uniforms.mirror;\n    }\n\n    /**\n     * Vertical position of the reflection point, default is 50% (middle)\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     * @default 0.5\n     */\n    set boundary(value: number)\n    {\n        this.uniforms.boundary = value;\n    }\n    get boundary(): number\n    {\n        return this.uniforms.boundary;\n    }\n\n    /**\n     * Starting and ending amplitude of waves\n     * @member {number[]}\n     * @default [0, 20]\n     */\n    set amplitude(value: Range)\n    {\n        this.uniforms.amplitude[0] = value[0];\n        this.uniforms.amplitude[1] = value[1];\n    }\n    get amplitude(): Range\n    {\n        return this.uniforms.amplitude;\n    }\n\n    /**\n     * Starting and ending length of waves\n     * @member {number[]}\n     * @default [30, 100]\n     */\n    set waveLength(value: Range)\n    {\n        this.uniforms.waveLength[0] = value[0];\n        this.uniforms.waveLength[1] = value[1];\n    }\n    get waveLength(): Range\n    {\n        return this.uniforms.waveLength;\n    }\n\n    /**\n     * Starting and ending alpha values\n     * @member {number[]}\n     * @default [1, 1]\n     */\n    set alpha(value: Range)\n    {\n        this.uniforms.alpha[0] = value[0];\n        this.uniforms.alpha[1] = value[1];\n    }\n    get alpha(): Range\n    {\n        return this.uniforms.alpha;\n    }\n}\n\nexport { ReflectionFilter };\nexport type { ReflectionFilterOptions };\n"],"names":["_ReflectionFilter","Filter","options","vertex","fragment","filterManager","input","output","clear","_a","_b","value","ReflectionFilter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BA,MAAMA,EAAN,cAA+BC,CAC/B,CAwBI,YAAYC,EACZ,CACI,MAAMC,EAAQC,CAAQ,EAd1B,KAAO,KAAO,EAeV,KAAK,SAAS,UAAY,IAAI,aAAa,CAAC,EAC5C,KAAK,SAAS,WAAa,IAAI,aAAa,CAAC,EAC7C,KAAK,SAAS,MAAQ,IAAI,aAAa,CAAC,EACxC,KAAK,SAAS,WAAa,IAAI,aAAa,CAAC,EAE7C,OAAO,OAAO,KAAMJ,EAAiB,SAAUE,CAAO,CAC1D,CAMA,MAAMG,EAA6BC,EAAsBC,EAAuBC,EAChF,CAnEJ,IAAAC,EAAAC,EAoEQ,KAAK,SAAS,WAAW,IAAKD,EAAAH,EAAM,cAAN,KAAA,OAAAG,EAAmB,MACjD,KAAK,SAAS,WAAW,IAAKC,EAAAJ,EAAM,cAAN,KAAA,OAAAI,EAAmB,OAEjD,KAAK,SAAS,KAAO,KAAK,KAE1BL,EAAc,YAAY,KAAMC,EAAOC,EAAQC,CAAK,CACxD,CAMA,IAAI,OAAOG,EACX,CACI,KAAK,SAAS,OAASA,CAC3B,CACA,IAAI,QACJ,CACI,OAAO,KAAK,SAAS,MACzB,CAOA,IAAI,SAASA,EACb,CACI,KAAK,SAAS,SAAWA,CAC7B,CACA,IAAI,UACJ,CACI,OAAO,KAAK,SAAS,QACzB,CAOA,IAAI,UAAUA,EACd,CACI,KAAK,SAAS,UAAU,GAAKA,EAAM,GACnC,KAAK,SAAS,UAAU,GAAKA,EAAM,EACvC,CACA,IAAI,WACJ,CACI,OAAO,KAAK,SAAS,SACzB,CAOA,IAAI,WAAWA,EACf,CACI,KAAK,SAAS,WAAW,GAAKA,EAAM,GACpC,KAAK,SAAS,WAAW,GAAKA,EAAM,EACxC,CACA,IAAI,YACJ,CACI,OAAO,KAAK,SAAS,UACzB,CAOA,IAAI,MAAMA,EACV,CACI,KAAK,SAAS,MAAM,GAAKA,EAAM,GAC/B,KAAK,SAAS,MAAM,GAAKA,EAAM,EACnC,CACA,IAAI,OACJ,CACI,OAAO,KAAK,SAAS,KACzB,CACJ,MAzHMC,EAANZ,EAAMY,EAGqB,SAAoC,CACvD,OAAQ,GACR,SAAU,GACV,UAAW,CAAC,EAAG,EAAE,EACjB,WAAY,CAAC,GAAI,GAAG,EACpB,MAAO,CAAC,EAAG,CAAC,EACZ,KAAM,CACV"}
{"version":3,"file":"filter-multi-color-replace.mjs","sources":["../src/MultiColorReplaceFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './multi-color-replace.frag';\nimport { Filter, utils } from '@pixi/core';\n\ntype Color = number | number[] | Float32Array;\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-multi-color-replace|@pixi/filter-multi-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    0.001\n *  )];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    0.001\n *  )];\n *\n */\nclass MultiColorReplaceFilter extends Filter\n{\n    private _replacements: Array<[Color, Color]> = [];\n    private _maxColors = 0;\n\n    /**\n     * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair\n     *        (an array length is 2). In the pair, the first value is original color , the second value\n     *        is target color.\n     * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n     *        (lower = more exact, higher = more inclusive)\n     * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n     *        fragment is only compiled once, this cannot be changed after construction.\n     *        If omitted, the default value is the length of `replacements`.\n     */\n    constructor(replacements: Array<[Color, Color]>, epsilon = 0.05, maxColors: number = replacements.length)\n    {\n        super(vertex, fragment.replace(/%maxColors%/g, (maxColors).toFixed(0)));\n\n        this.epsilon = epsilon;\n        this._maxColors = maxColors;\n        this.uniforms.originalColors = new Float32Array(maxColors * 3);\n        this.uniforms.targetColors = new Float32Array(maxColors * 3);\n        this.replacements = replacements;\n    }\n\n    /**\n     * The source and target colors for replacement. See constructor for information on the format.\n     *\n     * @member {Array<Array>}\n     */\n    set replacements(replacements: Array<[Color, Color]>)\n    {\n        const originals = this.uniforms.originalColors;\n        const targets = this.uniforms.targetColors;\n        const colorCount = replacements.length;\n\n        if (colorCount > this._maxColors)\n        {\n            throw new Error(`Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`);\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        for (let i = 0; i < colorCount; i++)\n        {\n            const pair = replacements[i];\n\n            // for original colors\n            let color = pair[0];\n\n            if (typeof color === 'number')\n            {\n                color = utils.hex2rgb(color);\n            }\n            else\n            {\n                pair[0] = utils.rgb2hex(color);\n            }\n\n            originals[i * 3] = color[0];\n            originals[(i * 3) + 1] = color[1];\n            originals[(i * 3) + 2] = color[2];\n\n            // for target colors\n            let targetColor = pair[1];\n\n            if (typeof targetColor === 'number')\n            {\n                targetColor = utils.hex2rgb(targetColor);\n            }\n            else\n            {\n                pair[1] = utils.rgb2hex(targetColor);\n            }\n\n            targets[i * 3] = targetColor[0];\n            targets[(i * 3) + 1] = targetColor[1];\n            targets[(i * 3) + 2] = targetColor[2];\n        }\n\n        this._replacements = replacements;\n    }\n    get replacements(): Array<[Color, Color]>\n    {\n        return this._replacements;\n    }\n\n    /**\n     * Should be called after changing any of the contents of the replacements.\n     * This is a convenience method for resetting the `replacements`.\n     */\n    refresh(): void\n    {\n        this.replacements = this._replacements;\n    }\n\n    /**\n     * The maximum number of color replacements supported by this filter. Can be changed\n     * _only_ during construction.\n     * @readonly\n     */\n    get maxColors(): number\n    {\n        return this._maxColors;\n    }\n\n    /**\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @default 0.05\n     */\n    set epsilon(value: number)\n    {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon(): number\n    {\n        return this.uniforms.epsilon;\n    }\n}\n\nexport { MultiColorReplaceFilter };\n"],"names":["MultiColorReplaceFilter","Filter","replacements","epsilon","maxColors","vertex","fragment","originals","targets","colorCount","i","pair","color","utils","targetColor","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCA,MAAMA,UAAgCC,CACtC,CAcI,YAAYC,EAAqCC,EAAU,IAAMC,EAAoBF,EAAa,OAClG,CACI,MAAMG,EAAQC,EAAS,QAAQ,eAAiBF,EAAW,QAAQ,CAAC,CAAC,CAAC,EAf1E,KAAQ,cAAuC,CAAA,EAC/C,KAAQ,WAAa,EAgBjB,KAAK,QAAUD,EACf,KAAK,WAAaC,EAClB,KAAK,SAAS,eAAiB,IAAI,aAAaA,EAAY,CAAC,EAC7D,KAAK,SAAS,aAAe,IAAI,aAAaA,EAAY,CAAC,EAC3D,KAAK,aAAeF,CACxB,CAOA,IAAI,aAAaA,EACjB,CACI,MAAMK,EAAY,KAAK,SAAS,eAC1BC,EAAU,KAAK,SAAS,aACxBC,EAAaP,EAAa,OAEhC,GAAIO,EAAa,KAAK,WAElB,MAAM,IAAI,MAAM,2BAA2BA,yCAAkD,KAAK,aAAa,EAInHF,EAAUE,EAAa,GAAK,GAE5B,QAASC,EAAI,EAAGA,EAAID,EAAYC,IAChC,CACI,MAAMC,EAAOT,EAAaQ,GAG1B,IAAIE,EAAQD,EAAK,GAEb,OAAOC,GAAU,SAEjBA,EAAQC,EAAM,QAAQD,CAAK,EAI3BD,EAAK,GAAKE,EAAM,QAAQD,CAAK,EAGjCL,EAAUG,EAAI,GAAKE,EAAM,GACzBL,EAAWG,EAAI,EAAK,GAAKE,EAAM,GAC/BL,EAAWG,EAAI,EAAK,GAAKE,EAAM,GAG/B,IAAIE,EAAcH,EAAK,GAEnB,OAAOG,GAAgB,SAEvBA,EAAcD,EAAM,QAAQC,CAAW,EAIvCH,EAAK,GAAKE,EAAM,QAAQC,CAAW,EAGvCN,EAAQE,EAAI,GAAKI,EAAY,GAC7BN,EAASE,EAAI,EAAK,GAAKI,EAAY,GACnCN,EAASE,EAAI,EAAK,GAAKI,EAAY,EACvC,CAEA,KAAK,cAAgBZ,CACzB,CACA,IAAI,cACJ,CACI,OAAO,KAAK,aAChB,CAMA,SACA,CACI,KAAK,aAAe,KAAK,aAC7B,CAOA,IAAI,WACJ,CACI,OAAO,KAAK,UAChB,CAMA,IAAI,QAAQa,EACZ,CACI,KAAK,SAAS,QAAUA,CAC5B,CACA,IAAI,SACJ,CACI,OAAO,KAAK,SAAS,OACzB,CACJ"}